<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Laev`Club</title>
    <link>http://www.laev.club/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>我是一个平凡的人，但是我要有一个不平凡的世界。</description>
    <pubDate>Thu, 29 Jun 2017 14:09:41 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>一个canvas小案例</title>
      <link>http://www.laev.club/2017/06/29/%E4%B8%80%E4%B8%AAcanvas%E5%B0%8F%E6%A1%88%E4%BE%8B/</link>
      <guid>http://www.laev.club/2017/06/29/%E4%B8%80%E4%B8%AAcanvas%E5%B0%8F%E6%A1%88%E4%BE%8B/</guid>
      <pubDate>Thu, 29 Jun 2017 10:30:31 GMT</pubDate>
      <description>
      
        &lt;p&gt;众所周知，canvas是html5里的一个新特性，与svg不同的是，它是使用javascript程序动态生成的，而SVG是使用XML文档描述来绘图。&lt;/p&gt;
&lt;p&gt;它们都有所之长短，SVG基于矢量，Canvas基于位图，所以SVG势必比Canvas要小，这并不是说SVG比C
      
      </description>
      
      <content:encoded><![CDATA[<p>众所周知，canvas是html5里的一个新特性，与svg不同的是，它是使用javascript程序动态生成的，而SVG是使用XML文档描述来绘图。</p>
<p>它们都有所之长短，SVG基于矢量，Canvas基于位图，所以SVG势必比Canvas要小，这并不是说SVG比Canvas要好，它们有自己的适用场景。</p>
<blockquote>
<p><strong>Canvas提供的功能更原始，适合像素处理，动态渲染和大数据量绘,适合图像密集型的游戏，我们还会在某些项目的头像裁切功能里看到它</strong></p>
<p><strong>SVG功能更完善，适合静态图片展示，高保真文档查看和打印的应用场景，一些logo的制作会用到它</strong></p>
</blockquote>
<p>当然这些都是这篇文章的扩展，回到主题，用Canvas绘制一个时钟。</p>
<p>效果如下<br><img src="/images/clock.gif" alt="&quot;时钟&quot;"></p>
<blockquote>
<p>canvas.clock.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line">function Clock(opt)&#123; </div><div class="line">	this.config=&#123;       //传入基础配置</div><div class="line">		target:&quot;&quot;,  //画布的id</div><div class="line">		width: 500, //画布宽度，默认500</div><div class="line">		height: 500 //画布高度，默认500</div><div class="line">	&#125;</div><div class="line">	for(var key in opt)&#123;</div><div class="line">		this.config[key]=opt[key];</div><div class="line">	&#125;</div><div class="line">	this.init(); //初始化运行</div><div class="line">&#125;</div><div class="line"></div><div class="line">Clock.prototype=&#123;</div><div class="line">	//初始化</div><div class="line">	init:function()&#123;</div><div class="line">		var clock=document.querySelector(this.config.target);</div><div class="line">		this.contx=clock.getContext(&quot;2d&quot;);</div><div class="line">		clock.width=this.config.width;</div><div class="line">		clock.height=this.config.height;</div><div class="line">		this.RunClock();//调用运动时钟</div><div class="line">	&#125;,</div><div class="line">	//绘制表盘</div><div class="line">	DrawDial:function(h,m,s)&#123;</div><div class="line">		var contx=this.contx;</div><div class="line">		var itWidth=this.config.width;</div><div class="line">		var itHeight=this.config.height;</div><div class="line">		//最小半径</div><div class="line">		var r=itWidth&gt;itHeight?itHeight/2-20:itWidth/2-20;</div><div class="line">		contx.save();//保存状态</div><div class="line">		contx.beginPath();//路径开始</div><div class="line">		contx.fillStyle=&quot;#fdfdfd&quot;;//填充颜色</div><div class="line">		contx.strokeStyle=&quot;#333&quot;;//边框颜色，笔触的颜色</div><div class="line">		contx.lineWidth=5;//笔触大小</div><div class="line">		contx.translate(itWidth/2,itHeight/2);//设置圆心</div><div class="line">		contx.arc(0,0,r,0,2*Math.PI);//绘制圆形表盘</div><div class="line">		contx.fill();//闭合路径，填充</div><div class="line">		contx.stroke();//按照以上定义开始绘制</div><div class="line"></div><div class="line">		this.r = r;//this.r赋值</div><div class="line">		this.DrawDot();//调用绘制刻度</div><div class="line">		this.DrawDigital();//调用绘制数字</div><div class="line">		this.DrawPointer( &quot;h&quot; ,h);//传入小时，绘制时针</div><div class="line">		this.DrawPointer( &quot;m&quot; ,m);//传入分钟，绘制分针</div><div class="line">		this.DrawPointer( &quot;s&quot; ,s);//传入秒，绘制秒针</div><div class="line">		contx.restore();//释放状态</div><div class="line">	&#125;,</div><div class="line">	//绘制刻度</div><div class="line">	DrawDot:function()&#123;</div><div class="line">		var contx=this.contx;</div><div class="line">		var deg=2*Math.PI/60;</div><div class="line">		contx.save();</div><div class="line">		for(var i=0;i&lt;60;i++)&#123;</div><div class="line">			contx.beginPath();</div><div class="line">			if(i%5==0)&#123;</div><div class="line">				contx.fillStyle=&quot;#000&quot;;</div><div class="line">				contx.rect(0,-this.r+2,5,15);//第一个参数是x坐标，第二个参数是y坐标，第三个参数是k宽度，第四个是高度</div><div class="line">			&#125;else&#123;</div><div class="line">				contx.fillStyle=&quot;#ccc&quot;;</div><div class="line">				contx.arc(0,-this.r+8,3,0,2*Math.PI);//第一二个参数作用是固定圆心，第三个是半径，第四五个分别是起始和结束角度，存在第六个参数，控制顺(false)逆时针(true)</div><div class="line">			&#125;</div><div class="line">			contx.rotate(deg);//对刻度旋转</div><div class="line">			contx.fill();</div><div class="line">		&#125;</div><div class="line">		contx.restore();</div><div class="line">	&#125;,</div><div class="line">	//绘制指针</div><div class="line">	DrawPointer:function(type,time)&#123;</div><div class="line">		var contx=this.contx;</div><div class="line">		var degH=2*Math.PI/12;</div><div class="line">		var degM=2*Math.PI/60;</div><div class="line">		contx.save();</div><div class="line">                //绘制指针开始</div><div class="line">		contx.beginPath();</div><div class="line">		contx.fillStyle = &quot;#000&quot;;</div><div class="line">		if( type == &quot;h&quot; )&#123;</div><div class="line">			contx.rotate( degH * time )</div><div class="line">			contx.rect( -2.5,-this.r / 1.8 , 6 , this.r / 1.5 )</div><div class="line">		&#125;else if( type == &quot;m&quot; )&#123;</div><div class="line">			contx.rotate( degM * time )</div><div class="line">			contx.rect( -2.5,-this.r / 1.5 , 4 , this.r / 1.3 )</div><div class="line">		&#125;else if( type == &quot;s&quot; )&#123;</div><div class="line">			contx.fillStyle = &quot;red&quot;;</div><div class="line">			contx.rotate( degM * time )</div><div class="line">			contx.rect( -1,-this.r / 1.3 , 2 , this.r / 1.1)</div><div class="line">		&#125;</div><div class="line">		contx.fill()</div><div class="line">                //绘制指针结束</div><div class="line">                //绘制中心点开始</div><div class="line">		contx.beginPath();</div><div class="line">		contx.fillStyle = &quot;yellow&quot;;</div><div class="line">		contx.arc(0,0,6,0,2*Math.PI);</div><div class="line">		contx.fill();</div><div class="line">                //绘制中心点结束</div><div class="line">		contx.restore();</div><div class="line">	&#125;,</div><div class="line">	//绘制数字开始</div><div class="line">	DrawDigital:function()&#123;</div><div class="line">		var contx=this.contx;</div><div class="line">		var deg=2*Math.PI/12;</div><div class="line">		contx.save();</div><div class="line">		contx.beginPath();</div><div class="line">		for(var i=1;i&lt;13;i++)&#123;</div><div class="line">		var x1=Math.sin(i*deg+0.01);</div><div class="line">		var y1=-Math.cos(i*deg+0.01);</div><div class="line">		contx.fillStyle=&quot;#000&quot;;</div><div class="line">		contx.font=&quot;bold 24px Calibri&quot;;</div><div class="line">		contx.textAlign=&apos;center&apos;;</div><div class="line">		contx.textBaseline=&apos;middle&apos;;</div><div class="line">		contx.fillText(i,x1*198,y1*198);//位置微调过了</div><div class="line">		&#125;</div><div class="line">		contx.closePath();</div><div class="line">		contx.restore();</div><div class="line">	&#125;,</div><div class="line">        //绘制数字结束</div><div class="line">        //运动时钟开始</div><div class="line">	RunClock:function()&#123;</div><div class="line">		var contx = this.contx;</div><div class="line">		var it = this;</div><div class="line">		setInterval(function()&#123;</div><div class="line">			var oDate = new Date();</div><div class="line">			var h = oDate.getHours();</div><div class="line">			var m = oDate.getMinutes();</div><div class="line">			var s = oDate.getSeconds();</div><div class="line">			if( h &gt;= 12 )&#123;</div><div class="line">				h -= 12;</div><div class="line">			&#125;</div><div class="line">			if( h &gt;= 24 )&#123;</div><div class="line">				h = 0</div><div class="line">			&#125;</div><div class="line">			contx.clearRect( 0,0,it.config.width,it.config.height );</div><div class="line">			it.DrawDial(h,m,s)//调用绘制表盘</div><div class="line">		&#125;,1000)</div><div class="line">	&#125;</div><div class="line">        //运动时钟结束</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>clock.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">	&lt;title&gt;&lt;/title&gt;</div><div class="line">	&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&quot;&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		*&#123;</div><div class="line">			margin: 0;</div><div class="line">			padding: 0;</div><div class="line">		&#125;</div><div class="line">		#clock&#123;</div><div class="line">			display: block;</div><div class="line">			margin:20px auto 0;</div><div class="line">			border:1px solid #ccc;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;canvas id=&quot;clock&quot;&gt;&lt;/canvas&gt;</div><div class="line">	</div><div class="line">	&lt;script src=&quot;./js/canvas.clock.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</div><div class="line">	&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;</div><div class="line">		new Clock(&#123;</div><div class="line">			target:&quot;#clock&quot;,</div><div class="line">			width:500,</div><div class="line">			height :500</div><div class="line">		&#125;)</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>ps：大多数知识点在代码中有所注释，当然这只是闲来无事的一个小案例，凭这么点代码是无法学会canvas的，还要多多练习，多写写小案例。</p>
]]></content:encoded>
      
      <comments>http://www.laev.club/2017/06/29/%E4%B8%80%E4%B8%AAcanvas%E5%B0%8F%E6%A1%88%E4%BE%8B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>简析CommonJs AMD和CMD</title>
      <link>http://www.laev.club/2017/06/18/%E7%AE%80%E6%9E%90CommonJs-AMD%E5%92%8CCMD/</link>
      <guid>http://www.laev.club/2017/06/18/%E7%AE%80%E6%9E%90CommonJs-AMD%E5%92%8CCMD/</guid>
      <pubDate>Sun, 18 Jun 2017 15:39:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;本篇文章将最快地帮助你弄懂CommonJs、AMD、CMD这三种规范的区别及优缺点。&lt;/p&gt;
&lt;p&gt;首先你得知道它们是什么！在此之前我也对它们没有明确的认识，充其量不过只知道它们是三种js规范。下面进入正题。&lt;/p&gt;
&lt;p&gt;CommonJs是一个偏向于服务端的规范，是同步加
      
      </description>
      
      <content:encoded><![CDATA[<p>本篇文章将最快地帮助你弄懂CommonJs、AMD、CMD这三种规范的区别及优缺点。</p>
<p>首先你得知道它们是什么！在此之前我也对它们没有明确的认识，充其量不过只知道它们是三种js规范。下面进入正题。</p>
<p>CommonJs是一个偏向于服务端的规范，是同步加载模块的(浏览器同步加载模块会导致速度、性能、可用性、调试和跨域访问等问题)。CommonJS定义的模块分为：模块引用(require)、模块定义(exports)、模块标识(module)，nodejs目前就采用了这种规范，而它在于nodejs里，一个文件就相当于一个模块，<strong>require</strong>用于引入外部模块读取文件并执行；<strong>exports</strong>是用于导出当前模块方法或变量的唯一导出口的一个对象；<strong>module</strong>对象就代表模块本身。而CommonJs也不能直接被浏览器解析加载，根本原因在于它缺少四个NodeJs环境的变module、exports、require、global。</p>
<p>AMD是”Asynchronous Module Definition”的缩写，意思是”异步模块定义”。它解决了CommonJs同步加载模块的问题，除此之外它还可以<strong>提前执行</strong>且推崇<strong>依赖就近</strong>，AMD也采用require语句加载模块，但是不同于CommonJS，它要求两个参数：<strong>require([module], callback)</strong>，所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。RequireJs就是实现了AMD规范，而它就是为了解决<strong>实现js文件的异步加载，避免网页失去响应和实现js文件的异步加载，避免网页失去响应</strong>。</p>
<p>CMD规范是淘宝的玉伯大牛为了推广seajs而产出的，而它相对于AMD来讲，它是<strong>延迟执行</strong>且推崇<strong>依赖前置</strong>，与AMD用许多相似之处，使用上也有不同的地方，CMD中当需要依赖模块的时候，在当前用require引入即可，但是AMD标准则需要提前在头部依赖参数部分写好。</p>
<p>接下来是它们的区别及优缺点的总结。</p>
<ul>
<li><p><strong>1.ComonJs/AMD/CMD目前所对应的分别是NodeJs/RequireJs/SeaJs ，另外他们都是js模块化开发的标准</strong>。</p>
</li>
<li><p><strong>2.CommonJs主要针对服务端，AMD/CMD主要针对浏览器端</strong></p>
</li>
<li><p><strong>3.AMD/CMD，都有difine和require，而且调用方式实际都可以添加依赖参数(不推荐)，另外都是并行加载js文件；区别是AMD是预加载，在并行加载js文件同时，还会解析执行该模块（因为还需要执行，所以在加载某个模块前，这个模块的依赖模块需要先加载完成）；而CMD是懒加载，虽然会一开始就并行加载js文件，但是不会执行，而是在需要的时候才执行。CMD 推崇依赖就近，AMD 推崇依赖前置。AMD的API默认是一个当多个用，CMD的API严格区分，推崇职责单一。</strong> 比如AMD里，require 分全局require和局部require。CMD里，没有全局require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。</p>
</li>
</ul>
<p><strong>AMD优点：加载快速，尤其遇到多个大文件，因为并行解析，所以同一时间可以解析多个文件。</strong></p>
<p><strong>AMD缺点：并行加载，异步处理，加载顺序不一定，可能会造成一些困扰，甚至为程序埋下大坑。</strong></p>
<p><strong>CMD优点：因为只有在使用的时候才会解析执行js文件，因此，每个JS文件的执行顺序在代码中是有体现的，是可控的。</strong></p>
<p><strong>CMD缺点：执行等待时间会叠加。因为每个文件执行时是同步执行（串行执行），因此时间是所有文件解析执行时间之和，尤其在文件较多较大时，这种缺点尤为明显。</strong></p>
<p>ps：目前对于这三种的规范就这些，有误之处还望指正，对于使用方法在这就不赘述了。</p>
]]></content:encoded>
      
      <comments>http://www.laev.club/2017/06/18/%E7%AE%80%E6%9E%90CommonJs-AMD%E5%92%8CCMD/#disqus_thread</comments>
    </item>
    
    <item>
      <title>生长</title>
      <link>http://www.laev.club/2017/05/22/%E5%BF%83%E5%BC%A6/</link>
      <guid>http://www.laev.club/2017/05/22/%E5%BF%83%E5%BC%A6/</guid>
      <pubDate>Mon, 22 May 2017 09:52:28 GMT</pubDate>
      <description>
      
        &lt;p&gt;时间的轨迹霸道得像一匹马，对于它，我们的生活就像任之践踏一马平川的草原。&lt;/p&gt;
&lt;p&gt;然而纵使留在再深的痕迹，这片地方还是要有存留下去的意义。&lt;/p&gt;
&lt;p&gt;存留的意义变成存留的理由，而又在存留的过程中产生。&lt;/p&gt;
&lt;p&gt;那在苦难中挣扎的人，并不垂死，而是在绚烂的阳光中
      
      </description>
      
      <content:encoded><![CDATA[<p>时间的轨迹霸道得像一匹马，对于它，我们的生活就像任之践踏一马平川的草原。</p>
<p>然而纵使留在再深的痕迹，这片地方还是要有存留下去的意义。</p>
<p>存留的意义变成存留的理由，而又在存留的过程中产生。</p>
<p>那在苦难中挣扎的人，并不垂死，而是在绚烂的阳光中扎根生长，去争取自己的一方天地。</p>
<p>我是一棵平凡的树，但我要护这一方天地。</p>
<p>我是一个平凡的人，但我要有一个不平凡的世界。</p>
]]></content:encoded>
      
      <comments>http://www.laev.club/2017/05/22/%E5%BF%83%E5%BC%A6/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
